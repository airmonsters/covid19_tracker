{"version":3,"sources":["commponents/Cards/Cards.module.css","commponents/Cards/Cards.js","api/index.js","commponents/Chart/Cahrt.js","commponents/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","commponents/Chart/Chart.module.css","commponents/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","props","data","confirmed","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","country","a","changeableUrl","axios","get","response","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDatilyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","style","formControl","NativeSelect","defaultValue","onChange","e","target","index","key","App","fetchedData","setState","state","county","fetchdata","this","image","src","covidImage","alt","bind","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7275e6de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__ivzqW\",\"card\":\"Cards_card__1E8QE\",\"infected\":\"Cards_infected__151IU\",\"recovered\":\"Cards_recovered__3FFjb\",\"deaths\":\"Cards_deaths__eAaJk\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards = (props)=>{\r\n\r\n    if(!props.data.confirmed){\r\n        return 'Loading'\r\n    }\r\n    return (\r\n      <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Confirmed\r\n              </Typography>\r\n              {/* input the data of infected people here */}\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.confirmed.value}\r\n                  duration={1.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              {/* input the date of this api updated */}\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(props.data.lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of active cases of COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Recovered\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.recovered.value}\r\n                  duration={1.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(props.data.lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of recoveries from COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.deaths.value}\r\n                  duration={1.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">Real Date</Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of deaths caused by COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\nconst daily_url = \"https://covid19.mathdro.id/api/daily\";\r\nconst country_url = \"https://covid19.mathdro.id/api/countries\";\r\n\r\nexport const fetchData = async (country) =>{\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const response = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed: response.data.confirmed,\r\n            recovered: response.data.recovered,\r\n            deaths: response.data.deaths,\r\n            lastUpdate: response.data.lastUpdate,\r\n        };\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try {\r\n        const response = await axios.get(daily_url)\r\n        const modifiedData = response.data.map((dailyData) => (\r\n            {\r\n                confirmed: dailyData.confirmed.total,\r\n                deaths: dailyData.deaths.total,\r\n                date: dailyData.reportDate,\r\n            }\r\n        ) )\r\n        return modifiedData\r\n\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries = async ()=>{\r\n    try {\r\n        const response = await axios.get(country_url)\r\n        const countries = response.data.countries\r\n        return countries.map((country)=>country.name );\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {fetchDailyData} from '../../api/index';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data, country}) => {\r\n    const [dailyData, setDatilyData] = useState([]);\r\n    console.log(data)\r\n    useEffect(\r\n        () =>{\r\n            const fetchAPI = async () =>{\r\n                setDatilyData(await fetchDailyData());\r\n            }\r\n            fetchAPI();\r\n        }\r\n    ,[]);\r\n\r\n    const lineChart = dailyData.length ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [\r\n            {\r\n              data: dailyData.map(({ confirmed }) => confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"#3333ff\",\r\n              fill: true,\r\n            },\r\n            {\r\n              data: dailyData.map(({ deaths }) => deaths),\r\n              label: \"Deaths\",\r\n              borderColor: \"red\",\r\n              backgroundColor: 'rbga(255,0,0,0.5)',\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n    const barChar = data.confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n          datasets: [\r\n            {\r\n              label: \"People\",\r\n              backgroundColor: [\r\n                'rgba(0, 0, 255, 0.5)',\r\n                'rgba(228, 231, 13, 0.5)',\r\n                'rgba(255, 0, 0, 0.5)',\r\n              ],\r\n              data: [data.confirmed.value, data.recovered.value, data.deaths.value]\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n    return (\r\n        <div className= {styles.container}>\r\n          {country? barChar:lineChart}\r\n            {/* {lineChart} */}\r\n            {/* {barChar} */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {NativeSelect, FormControl} from '@material-ui/core'\r\nimport {fetchCountries} from '../../api'\r\nimport style from './CountryPicker.module.css'\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className= {style.formControl}>\r\n      <NativeSelect defaultValue='' onChange={ (e)=>{handleCountryChange(e.target.value)} } >\r\n        <option value=''>Global</option>\r\n        {fetchedCountries.map((country, index) =><option key={index} value={country} >{country} </option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\n\r\nimport {Cards, Chart, CountryPicker } from './commponents'\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api/index'\r\nimport covidImage from './images/image.png'\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data: {},\r\n            county: '',\r\n        }\r\n    }\r\n    async componentDidMount(){\r\n        const fetchdata = await fetchData();\r\n        this.setState({ data: fetchdata });\r\n    }\r\n\r\n    handleCountryChange = async (country)=>{\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data: fetchedData , country: country})\r\n    }\r\n\r\n    render(){\r\n        const {data, country} = this.state\r\n        return (\r\n          <div className={styles.container}>\r\n            <img className={styles.image} src={covidImage} alt=\"COVID-19\" />\r\n            <Cards data={data} />\r\n            <CountryPicker\r\n              handleCountryChange={this.handleCountryChange.bind(this)}\r\n            />\r\n            <Chart data={data} country={country} />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2lt_S\",\"image\":\"App_image__2DM6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__18Km3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__XSGuH\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}